" Vim
set nocompatible " Use Vim defaults (much better!)
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

" Snippets
Bundle "tomtom/tlib_vim"
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "honza/vim-snippets"
Bundle "garbas/vim-snipmate"

Plugin 'tpope/vim-fugitive'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'w0rp/ale'
Plugin 'vim-airline/vim-airline'
Plugin 'tpope/vim-vinegar'
Plugin 'ervandew/supertab'
Plugin 'davidoc/todo.txt-vim'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'jamessan/vim-gnupg'
Plugin 'scrooloose/nerdcommenter'
Plugin 'davidhalter/jedi-vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'scrooloose/NERDTree'
Plugin 'xolox/vim-misc'
Plugin 'wlangstroth/vim-racket'
Bundle "Shirk/vim-gas"
Plugin 'elzr/vim-json'
Plugin 'tweekmonster/django-plus.vim'
Plugin 'mhinz/vim-signify'
Plugin 'rust-lang/rust.vim'
Plugin 'ChesleyTan/wordCount.vim'

Bundle 'istepura/vim-toolbar-icons-silk'

function! Writing()
    set nonumber  " turn off line numbers
    set guicursor=a:blinkon0  " Turn off the blinking cursor
    set laststatus=1 " Hides status bar when only one file open
    set wrap
    set linebreak
    noremap j gj
    noremap k gk
    noremap 0 g0
    noremap $ g$
    set whichwrap=b,s,<,>,[,],h,l
endfunction


set t_Co=256 " Set Vim for 256 colors
colorscheme synic
syntax enable
set nofoldenable
set hidden

execute pathogen#infect()

set nobackup 
set viminfo='20,\"50 " read/write a .viminfo file, don't store more
" than 50 lines of registers
set showmode
set incsearch
set ignorecase
set smartcase " override ignorecase if capitalized

" Indentation
"set cindent
"set autoindent
set smartindent
filetype plugin indent on
set bs=2 " allow backspacing over everything in insert mode
set backspace=indent,eol,start

set wildmode=longest,list
set nohlsearch
set ruler
set display+=lastline
set formatoptions=tcql
set lbr

" I like highlighting strings inside C comments
let c_comment_strings=1

" This comes from PBP
set tabstop=4
set expandtab
set shiftwidth=4
set shiftround

" Don't use Ex mode, use Q for formatting
map Q gq

" Insert a timestamp
nmap <F3> a<C-R>=strftime("%T: ")<CR><Esc>
imap <F3> <C-R>=strftime("%T: ")<CR>

" Set cursor mode so it will move by visible lines
map <up> gk
imap <up> <C-o>gk
map <down> gj
imap <down> <C-o>gj
map <home> g<home>
imap <home> <C-o>g<home>
map <end> g<end>
imap <end> <C-o>g<end>

" map ]], [[, [], and ][ to match KNR style
:map [[ ?{<CR>w99[{
:map ][ /}<CR>b99]}
:map ]] j0[[%/{<CR>
:map [] k$][%?}<CR>


" setup omnicompletion for file types
if has("autocmd")
    autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
    autocmd FileType css set omnifunc=csscomplete#CompleteCSS
    autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
    autocmd FileType php set omnifunc=phpcomplete#CompletePHP
    autocmd FileType c set omnifunc=ccomplete#Complete
    autocmd FileType perl set makeprg=perl\ -c\ %\ $*
    autocmd FileType perl set errorformat=%f:%l:%m
    autocmd FileType perl set autowrite


    " http://vim.wikia.com/wiki/Python_-_check_syntax_and_run_script
    autocmd BufRead *.py set makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\"
    autocmd BufRead *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
    autocmd BufRead *.py nmap <F5> :!python %<CR>
    autocmd BufRead,BufNewFile /etc/nginx/*,/usr/local/nginx/conf/* if &ft == '' | setfiletype nginx | endif 
    
    " Automatically source .vimrc when we save it
    autocmd BufWritePost ~/.vimrc so %

    " Jedi
    autocmd FileType python setlocal completeopt-=preview
    " Disable Rope
    let g:pymode_rope = 0

    " Understand Markdown files
    autocmd BufNewFile,BufRead *.md set filetype=markdown


    au BufReadPost *.rkt,*.rktl set filetype=scheme
    au filetype racket set lisp
    au filetype racket set autoindent

    au! FileType python setl nosmartindent

    autocmd FileType *
    \ if &omnifunc != '' |
    \   call SuperTabChain(&omnifunc, "<c-p>") |
    \   call SuperTabSetDefaultCompletionType("context") |
    \ endif

endif " has("autocmd")

" Set the clipboard to the X windows clipboard
"set clipboard=unnamedplus
set clipboard^=unnamed,unnamedplus

" Yank to clipboard
noremap <leader>y "*y

" Paste from clipboard without messing up indent.
noremap <leader>p :set paste<CR>"*p<CR>:set nopaste<CR>

" Some shortcuts that are nice to have.
map <leader>v :sp ~/.vimrc<CR><C-W>_
map <leader>T :sp ~/Dropbox/todo/todo.txt<CR><C-W>_
map <leader>N :NERDTree<CR>
" json formatting
map <leader>j :%!python -m json.tool<CR>

" show the registers from things cut/yanked
nmap <leader>r :registers<CR>

" Turn on spell checking
setlocal spell spelllang=en_us

" Enable the :Man command for manual pages
runtime ftplugin/man.vim

" Netrw settings
let g:netrw_liststyle=3 " Use tree-mode as default view
let g:netrw_browse_split=0 " Open file in previous buffer
let g:netrw_preview=1 " preview window shown in a vertically split

" Turn on numbering
set number

" ==================================================
" Windows / Splits
" ==================================================

" ctrl-jklm  changes to that split
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" and lets make these all work in insert mode too ( <C-O> makes next cmd
" happen as if in command mode )
"imap <C-W> <C-O><C-W>

" use - and + to resize horizontal splits
map - <C-W>-
map + <C-W>+

" and for vsplits with alt-< or alt->
map <M-,> <C-W>>
map <M-.> <C-W><

" from https://github.com/spf13/spf13-vim/blob/master/.vimrc
if has('statusline')
    set laststatus=2
    " Broken down into easily includeable segments
    set statusline=%<%f\    " Filename
    set statusline+=%w%h%m%r " Options
    set statusline+=%{fugitive#statusline()} "  Git Hotness
    set statusline+=\ [%{&ff}/%Y]            " filetype
    set statusline+=\ [%{getcwd()}]          " current dir
    set statusline+=%#warningmsg#
    set statusline+=%*
    set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
    set statusline+=\ %{wordCount#WordCount()}  " Word Count
endif

" Calendar
let g:calendar_google_calendar = 1
let g:calendar_google_task = 1

" Git time lapse
map <leader>gt :call TimeLapse() <cr>

" gnupg Defaults
let g:GPGDefaultRecipients = ['craig@decafbad.net']

" Fugitive
set diffopt+=vertical

" Pelican
let g:pelican_blog_source = '~/projects/decafbad'
let g:pelican_blog_html = '~/projects/decafbad/output'
"let g:pelican_git_master = 'http://github.com/username/blog.git'
"let g:pelican_publish_server = 'username@server.domain.com:~/html_directory'

" Supertab
let g:SuperTabDefaultCompletionType="context"

" CtrlP
let g:ctrlp_max_files=0
